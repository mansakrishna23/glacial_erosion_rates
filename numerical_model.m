%% Modelling time scale biases in erosion rates
% This script attempts to replicate the numerical model described by <https://www.science.org/doi/10.1126/sciadv.1600204 
% Ganti et al. (2016)>, in which they found time scale biases in erosion rates 
% could be generated by random independent time series of hiatuses and erosional 
% pulses generated by a heavy tailed distribution
%% Parameters
% Parameter values as defined by Ganti et al. (2016)

tail_index = 0.5; % pareto parameter
upper_bound = 200e3; % max hiatus length [y]
t_max = 5e6; % max time [y]
erosion_mag = 10; % erosion magnitude [mm]
N = 1000; % number of independent model runs

% cutoff to ensure that start of time series is independent of hiatus length
cutoff = 500e3; 
% time scales at which to evalusate erosion rates
time_scales = sort([10.^(0:6), upper_bound, 4e4, 2e6,4e6]);
%% Example model run
% Representative time series of erosion magnitude and time before present

time_bp = sample_pareto(1, tail_index, upper_bound, t_max, cutoff);

figure(1)
clf
hold on
set(gca,'FontSize',10)
time_erosion = [time_bp,time_bp,time_bp]';
sz = size(time_bp);
erosion_pulses = [zeros(sz),erosion_mag*ones(sz),zeros(sz)]';
plot(time_erosion(:), erosion_pulses(:),'color','k','LineWidth',1)

xlim([0 t_max])
xlabel('Time BP [My]')
ylabel('Erosion [mm]')
ylim([0 20])
%% Run model
% This implementation attempts to follow Ganti et al. (2016) as described

erosion_rates = run_model(N, tail_index, upper_bound, t_max, cutoff, erosion_mag, time_scales);

figure(2)

plot_model(time_scales, erosion_rates, upper_bound)

x = time_scales;
y = mean(erosion_rates,1,'omitmissing');
p = polyfit(log10(x(x<upper_bound)),log10(y(x<upper_bound)),1);


%% Without counting 0 erosion periods
% This implementation follows Ganti et al. (2016) but periods with 0 total 
% erosion are not included in the average

erosion_rates = run_model(N, tail_index, upper_bound, t_max, cutoff, erosion_mag, time_scales);
erosion_rates(erosion_rates==0) = nan;

figure(3)
plot_model(time_scales, erosion_rates, upper_bound)

x = time_scales;
y = mean(erosion_rates,1,'omitmissing');
p = polyfit(log10(x(x<upper_bound)),log10(y(x<upper_bound)),1);

%% Functions

function time_bp = sample_pareto(seed, tail_index, upper_bound, t_max, cutoff)
    % pull random samples of hiatuses from truncated pareto distribution
    rng(seed) % For reproducibility
    N = t_max/100; % number of samples
    u = rand(N, 1); % N uniform random numbers (0, 1)
    a = 1-(upper_bound)^(-tail_index); % parameter to truncate pareto
    x_tp = round((1-a*u).^(-1/tail_index)); % pareto samples (1, upper_bound)
    
    % build time series (0, t_max)
    time_bp = cumsum(x_tp) - cutoff;
    ix = time_bp>0 & time_bp<=t_max;
    time_bp = time_bp(ix);
end

function erosion_rates = run_model(N, tail_index, upper_bound, t_max, cutoff, erosion_mag, time_scales)
    erosion_rates = zeros(N,length(time_scales)); % to store erosion rates for each time scale for each model run
    
    for i = 1:N
        time_bp = sample_pareto(i, tail_index, upper_bound, t_max,cutoff);
        erosion = ones(size(time_bp)) * erosion_mag;
        erosion_total = cumsum(erosion);
        ix = sum(time_bp <= time_scales, 1);
        non_zero = ix>0;
        rates = erosion_total(ix(non_zero))./time_bp(ix(non_zero));
        erosion_rates(i, non_zero) = rates;
    end
end

function plot_model(time_scales, erosion_rates, upper_bound)
    clf
    hold on
    box on
    set(gca,'XScale','log','yscale','log','FontSize',10,'layer','top')
    xlim([1e0,1e7])
    ylim([1e-4,1e3])
    xticks(10.^(0:7))
    yticks(10.^(-5:2))
    xlabel('Time scale [y]')
    ylabel('Erosion rate [mm/y]')

    patch([upper_bound,upper_bound,1e7,1e7],[ylim,flip(ylim)],0.9*[1 1 1],'edgecolor','none')
    line([upper_bound,upper_bound],ylim,'color','k','linewidth',0.75,'linestyle','--')
    
    m_er = mean(erosion_rates,1,'omitmissing');
    max_er = max(erosion_rates,[],1,'omitmissing');
    min_er = min(erosion_rates,[],1,'omitmissing');
    
    plot(time_scales,max_er,'r')
    plot(time_scales,min_er,'r')
    
    scatter(time_scales,m_er,50,'r','filled')
end