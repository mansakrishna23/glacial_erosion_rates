%% Modelling time scale biases in erosion rates
% This script attempts to replicate the numerical model described by 
% <https://www.science.org/doi/10.1126/sciadv.1600204 Ganti et al. (2016)>, 
% in which they found time scale biases in erosion rates could be generated 
% by random independent time series of hiatuses and erosion pulses 
% generated by a heavy tailed distribution
%% Parameters
% Values as defined by Ganti et al. (2016)
tail_index = 0.5; % pareto tail index
upper_bound = 200e3; % max hiatus length [y]
t_max = 5e6; % max time [y]
erosion_mag = 10; % erosion magnitude [mm]
N = 1000; % number of independent model runs

% time scales at which to evalusate erosion rates
time_scales = 10.^(0.5:0.5:6.5);

%% Example model run
% Representative time series of erosion magnitude and time before present
time_bp = hiatus_time_series(0, tail_index, upper_bound, t_max);

% FIGURE: barcode of hiatuses and erosion pulses 
figure(1)
clf
hold on
set(gca,'FontSize',12)
time_erosion = [time_bp,time_bp,time_bp]';
sz = size(time_bp);
erosion_pulses = [zeros(sz),erosion_mag*ones(sz),zeros(sz)]';
plot(time_erosion(:), erosion_pulses(:),'color','k','LineWidth',1)

xlim([0 t_max])
ylim([0 12])

xlabel('Time BP [My]')
ylabel('Erosion [mm]')

%% Run model
% This implementation attempts to follow Ganti et al. (2016) as described

% erosion rates for given time scales
unit_erosion_rates = run_model(N, tail_index, upper_bound, t_max, time_scales);
erosion_rates = unit_erosion_rates * erosion_mag;

% erosion rates ignoring periods with 0 total erosion
erosion_rates_positive = erosion_rates;
erosion_rates_positive(erosion_rates==0) = nan;
% counts of zero and positive erosion rates for given time scales
count_zeros = sum(erosion_rates == 0,1);
count_positive = sum(erosion_rates > 0,1);

% FIGURE: model results
figure(2)
clf

% SUBPLOT: apparent erosion rates by time scale
subplot(3,3,1:6)
hold on
box on
set(gca,'XScale','log','yscale','log','FontSize',10,'layer','top')
xlim([10^0,1e7])
ylim([1e-4,1e3])
xticks(10.^(0:7))
yticks(10.^(-5:2))
xlabel('Averaging time scale [y]')
ylabel('Estimated erosion rate [mm/y]')

% plot upper bound
patch([upper_bound,upper_bound,1e7,1e7],[ylim,flip(ylim)],0.9*[1 1 1],'edgecolor','none')
line([upper_bound,upper_bound],ylim,'color','k','linewidth',0.75,'linestyle','--')
% plot expected behavior
mean_erosion_rate = 10.^(-0.5*log10(upper_bound) + log10(erosion_mag));
plot([1e0,upper_bound],[erosion_mag, mean_erosion_rate],'r','linewidth',1)
plot([1e0,1e7],[mean_erosion_rate, mean_erosion_rate],'k','linewidth',1)

% plot model data points
x_data = reshape(repmat(time_scales,N,1),[1,N*length(time_scales)]);
y_data = erosion_rates(:);
s = scatter(x_data,y_data,10,'r','filled','MarkerFacealpha',0.1);
% plot time scale means for all data
s_1 = plot(time_scales,mean(erosion_rates,1,'omitmissing'),'ok', ...
    'markersize',7.5,'markerfacecolor','k','DisplayName','All');
% plot time scale means for positive data
s_2 = plot(time_scales,mean(erosion_rates_positive,1,'omitmissing'),'or', ...
    'markersize',7.5,'markerfacecolor','r','DisplayName','Positive');

% legend
s_l1 = plot(nan,nan,'o','markerfacecolor',[0.5 0.5 0.5], 'markeredgecolor','none', 'markersize',7.5,'DisplayName','Mean');
s_l2 = plot(nan,nan,'o','markerfacecolor',[0.8 0.8 0.8], 'markeredgecolor','none', 'markersize',3,'DisplayName','Data');
legend([s_1,s_2,s_l1,s_l2],'location','northwest','NumColumns',2)

% SUBPLOT: zero and positive data count
subplot(3,3,7:9)
hold on
box on
set(gca,'FontSize',10,'layer','top','xAxisLocation','top')
ylim([0 N])
ylabel('Count')
xlim([0 7])
xlabel([])
xticklabels([])
% plot upper bound
patch([log10(upper_bound),log10(upper_bound),7,7],[ylim,flip(ylim)],0.9*[1 1 1],'edgecolor','none')
line([log10(upper_bound),log10(upper_bound)],ylim,'color','k','linewidth',0.75,'linestyle','--')
% plot data
b = bar(log10(time_scales),[count_positive;count_zeros],0.5,'stacked', 'FaceColor','flat','EdgeColor','none');
b(1).CData = [1 0 0];
b(2).CData = [0 0 0];

%% Functions

function x_tp = sample_pareto(seed, n, tail_index, upper_bound)
    rng(seed) % seed for random number generator
    U = rand(n, 1); % N uniform random numbers (0, 1)
    % truncated pareto samples (1, upper_bound)
    % https://en.wikipedia.org/wiki/Pareto_distribution#Generating_bounded_Pareto_random_variables
    x_tp = (1 - U*(1 - upper_bound^-tail_index)).^-(1/tail_index); 
    x_tp = round(x_tp); % 1 year precision
end

function time_bp = hiatus_time_series(seed, tail_index, upper_bound, t_max)
    n = t_max/1e2; % estimated number of pareto samples to fill time series
    x_tp = sample_pareto(seed, n, tail_index, upper_bound);
    % time series before present (0, t_max)
    % shift to ensure that start of time series is independent of hiatus length
    shift = 2.5*upper_bound;
    time_bp = cumsum(x_tp) - shift;
    ix = time_bp>0 & time_bp<=t_max;
    time_bp = time_bp(ix);
end

function unit_erosion_rates = run_model(N, tail_index, upper_bound, t_max, time_scales)
    % erosion rates for each model run
    unit_erosion_rates = zeros(N,length(time_scales)); 
    for i = 1:N
        % time series of hiatuses sampled from truncated pareto
        time_bp = hiatus_time_series(i, tail_index, upper_bound, t_max);
        erosion = ones(size(time_bp)); % erosion pulses
        erosion_total = cumsum(erosion); % total erosion
        % erosion rates for each time scale        
        ix = sum(time_bp <= time_scales, 1);
        col = ix>0;
        unit_erosion_rates(i, col) = erosion_total(ix(col))./time_bp(ix(col));
    end
end

