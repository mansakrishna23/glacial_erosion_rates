%% Modelling time scale biases in erosion rates
% This script attempts to replicate the numerical model described by
% <https://www.science.org/doi/10.1126/sciadv.1600204 Ganti et al. (2016)>
% They found time scale biases in erosion rates could be generated by time-
% series of erosional hiatuses sampled from a heavy tailed distribution
%% Parameters
% Values as defined by Ganti et al. (2016)
alpha = 0.5; % pareto tail index
h_max = 200e3; % max hiatus length [y]
t_max = 5e6; % max time [y]
erosion_mag = 10; % erosion magnitude [mm]
N = 1000; % number of independent model runs

% time scales at which to evalusate erosion rates
time_scales = 10.^(0.5:0.5:6.5);
erosion_base = 2e-4; % baseline erosion during hiatuses
%% Example model run
% Representative time series of erosion magnitude and time before present
time_bp = hiatus_time_series(0, alpha, h_max, t_max);

% FIGURE: barcode of hiatuses and erosion pulses
figure(1)
clf
hold on
set(gca,'FontSize',12)
erosion_time = [time_bp,time_bp,time_bp]';
sz = size(time_bp);
erosion_pulse = [erosion_base*ones(sz),erosion_mag*ones(sz),erosion_base*ones(sz)]';
plot(erosion_time(:), erosion_pulse(:),'color','k','LineWidth',1)

xlim([0 t_max])
ylim([0 12])

xlabel('Time BP [My]')
ylabel('Erosion [mm]')

%% Run model
% This implementation attempts to follow Ganti et al. (2016) as described

% erosion rates for given time scales
unit_erosion_rate = run_model(N, alpha, h_max, t_max, time_scales);
erosion_rate = unit_erosion_rate * (erosion_mag) + erosion_base;

% erosion rates ignoring periods with only low erosion
erosion_rate_high = erosion_rate;
erosion_rate_high(erosion_rate==erosion_base) = nan;
% counts of low and high erosion rates for given time scales
islow = erosion_rate == erosion_base;
ishigh = erosion_rate > erosion_base;

count_low = sum(islow,1);
count_high = sum(ishigh,1);

% FIGURE: model results
color_a = [0.1961    0.5333    0.7412];
color_b = [0 0 0];

figure(2)
clf

% SUBPLOT: apparent erosion rates by time scale
subplot(3,3,1:6)
hold on
box on
set(gca,'XScale','log','yscale','log','FontSize',10,'layer','top')
xlim([10^0,1e7])
ylim([1e-4,1e3])
xticks(10.^(0:7))
yticks(10.^(-5:2))
xlabel('Averaging time scale [y]')
ylabel('Estimated erosion rate [mm/y]')

% plot hiatus max upper bound
patch([h_max,h_max,1e7,1e7],[ylim,flip(ylim)],0.9*[1 1 1],'edgecolor','none')
plot([h_max,h_max],ylim,'--k','linewidth',0.75)

% plot expected behavior
mean_erosion_rate = 10.^(-0.5*log10(h_max) + log10(erosion_mag + erosion_base));
plot([1e0,h_max],[erosion_mag + erosion_base, mean_erosion_rate],'color',color_a,'linewidth',1)
plot([1e0,1e7],[mean_erosion_rate, mean_erosion_rate],'k','linewidth',1)

% plot model data points
x_data = reshape(repmat(time_scales,N,1),[1,N*length(time_scales)]);
y_data = erosion_rate(:);
s = scatter(x_data(islow(:)),y_data(islow(:)),10,color_b,'filled','MarkerFacealpha',0.1);
s = scatter(x_data(ishigh(:)),y_data(ishigh(:)),10,color_a,'filled','MarkerFacealpha',0.1);
% plot time scale means for all data
s_1 = plot(time_scales,mean(erosion_rate,1,'omitmissing'),'o','markersize',7.5, ...
    'markerfacecolor',color_b,'markeredgecolor','k','DisplayName','All');
% plot time scale means for high erosion data
s_2 = plot(time_scales,mean(erosion_rate_high,1,'omitmissing'),'o', ...
    'markersize',7.5,'markerfacecolor',color_a,'markeredgecolor','k', ...
    'DisplayName','High');

% legend
s_l1 = plot(nan,nan,'o','markerfacecolor',0.5*[1 1 1], ...
    'markeredgecolor','k', 'markersize',7.5,'DisplayName','Mean');
s_l2 = plot(nan,nan,'o','markerfacecolor',0.8*[1 1 1], ...
    'markeredgecolor','none', 'markersize',3,'DisplayName','Data');
legend([s_1,s_2,s_l1,s_l2],'location','northwest','NumColumns',2)

% SUBPLOT: low and high data count
subplot(3,3,7:9)
hold on
box on
set(gca,'FontSize',10,'layer','top','xAxisLocation','top')
ylim([0 N])
ylabel('Count')
xlim([0 7])
xlabel([])
xticklabels([])
% plot upper bound
patch(log10([h_max,h_max,1e7,1e7]),[ylim,flip(ylim)],0.9*[1 1 1], ...
    'edgecolor','none')
plot(log10([h_max,h_max]),ylim,'--k','linewidth',0.75)

% plot data
b = bar(log10(time_scales),[count_high;count_low],0.5,'stacked', ...
    'FaceColor','flat','EdgeColor','none');
b(1).CData = color_a;
b(2).CData = color_b;

%% Functions

function x_tp = sample_pareto(seed, n, alpha, H)
rng(seed) % seed for random number generator
U = rand(n, 1); % N uniform random numbers (0, 1)
% truncated pareto samples (1, h)
% https://en.wikipedia.org/wiki/Pareto_distribution#Bounded_Pareto_distribution
x_tp = (1 - U*(1 - H^-alpha)).^-(1/alpha);
x_tp = round(x_tp); % 1 year precision
end

function time_bp = hiatus_time_series(seed, alpha, h_max, t_max)
n = t_max/1e2; % estimated number of pareto samples to fill time series
x_tp = sample_pareto(seed, n, alpha, h_max);
% time series before present (0, t_max)
% shift to ensure that start of time series is independent of hiatus length
shift = 2.5*h_max;
time_bp = cumsum(x_tp) - shift;
ix = time_bp>0 & time_bp<=t_max;
time_bp = time_bp(ix);
end

function unit_erosion_rate = run_model(N, alpha, h_max, t_max, time_scale)
% erosion rates for each model run
unit_erosion_rate = zeros(N,length(time_scale));
for i = 1:N
    % time series of hiatuses sampled from truncated pareto
    time_bp = hiatus_time_series(i, alpha, h_max, t_max);
    erosion = ones(size(time_bp)); % erosion pulses
    erosion_total = cumsum(erosion); % total erosion
    % erosion rates for each time scale
    ix = sum(time_bp <= time_scale, 1);
    col = ix>0;
    unit_erosion_rate(i,col) = erosion_total(ix(col))./time_bp(ix(col));
end
end

